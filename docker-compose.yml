services:
  gymworkouttracker.api:
    image: gymworkouttracker.api
    build:
      context: ./src
      dockerfile: GymWorkoutTracker.Api/Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=gymworkouttracker.postgres;Port=${POSTGRES_PORT};Database=${POSTGRES_DB};username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
    volumes:
      - ./src/GymWorkoutTracker.Api:/src/GymWorkoutTracker.Api
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
    working_dir: /src/GymWorkoutTracker.Api
    command: dotnet watch run --urls http://+:8080;https://+:8081
    depends_on:
      gymworkouttracker.postgres:
        condition: service_healthy
    networks:
      - gymworkouttracker.network
    restart: unless-stopped
  gymworkouttracker.postgres:
    image: postgres:latest
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gymworkouttracker.network
    restart: unless-stopped
networks:
  gymworkouttracker.network:
    driver: bridge
volumes:
  pgdata:
